#!/usr/bin/env node
const { exec } = require("child_process");

//Entry point of the script
async function main() {
    let [windows, screens] = await Promise.all([
        systemExec('qtile cmd-obj -o cmd -f windows'),
        systemExec('qtile cmd-obj -o cmd -f screens'),
    ]);

    let windowsObj = pythonStrToObject(windows);
    let screensObj = pythonStrToObject(screens);

    //getting data grouped by group
    let groupObj = windowsObj.reduce((acc, item) => {
        if (item.group) {
            if (!acc[item.group]) {
                acc[item.group] = [];
            }
            if (item.group)
                acc[item.group].push(item);
        }
        return acc;
    }, {});

    windowsAlerts = (await Promise.all(windowsObj.map(w =>
        systemExec(`if [ -z "$(xprop -id '${w.id}' | grep _NET_WM_STATE_DEMANDS_ATTENTION)" ]; then echo false; else echo true; fi`)))
    )
        .map((status, i) =>
            new Object({
                id: windowsObj[i].id,
                status: status.replace('\n', ''),
            })
        )

    let finalObj = Object.keys(groupObj).map(k => {
        return new Object({
            index: k,
            windows: groupObj[k].length,
            alert: groupObj[k].map(w => windowsAlerts.find(w2 => w.id == w2.id).status).includes('true'),
        })
    });
    workspacesIdxs = [0, 1, 2, 3, 4, 5, 6, 7];
    // let listenersYuck = buildListeners(finalObj, screensObj, workspacesIdxs);
    let variablesYuck = buildVariables(finalObj, screensObj, workspacesIdxs);
    //saving yuck to 'variables.yuck' file
    fs = require('fs');
    fs.writeFile("../variables.yuck", variablesYuck, function (err) {
        if (err) {
            return console.log(err);
        }
        console.log("The file was saved!");
    });
}

//Builds yuck as a string
function buildVariables(dataObj, screensObj, idxs) {
    let yuckListeners = idxs.map(i => {
        item = dataObj.find(d => d.index == i);
        screen = screensObj.findIndex(s => s.group == i);
        return item ? 
        [`(defvar ws-data${i}-monitor ${screen})`,`(defvar ws-data${i}-alert ${item.alert})`,`(defvar ws-data${i}-windows ${item.windows})`].join('\n')
        :
        [`(defvar ws-data${i}-monitor ${screen})`,`(defvar ws-data${i}-alert false)`,`(defvar ws-data${i}-windows 0)`].join('\n')

    }).join('\n\n');

    return yuckListeners;
}

//executes a command in the terminal and returns a promise
function systemExec(cmd) {
    return new Promise((resolve, reject) => {
        exec(cmd, (error, stdout, stderr) => {
            if (error) reject(`error: ${error.message}`);
            if (stderr) reject(`stderr: ${stderr}`);

            resolve(stdout);
        });
    });
}


//Parses from python object in string format to javascript object and fixes qtile parser error
function pythonStrToObject(json) {
    return eval(json
        .replaceAll('False', 'false')
        .replaceAll('True', 'true')
        .replaceAll('None', 'null')
        //Qtile parser error
        .replaceAll(/'\s+'/g, " "));

}

//executes main function
main();
